textOutput("CI"),
DT::DTOutput("formated_tresorie")
)
)
)
# Définir le serveur
server <- function(input, output) {
cout_total_input <- eventReactive(input$simulate, {
cout_total_construction(cout_construction = input$cout_construction,
cout_non_construction_inclut_CI = input$cout_non_construction_inclut_CI,
cout_non_construction_hors_CI = input$cout_non_construction_hors_CI,
imprevu = input$imprevu)
})
pret <- reactive(calcul_pret(cout_total = cout_total_input(),
apport_perso = input$apport_perso))
nombre_mensualite <- eventReactive(input$simulate, {
calcul_nombre_mensualite(duree_annee_pret = input$duree_annee_pret)
})
mensualite <- reactive(calcul_mensualite(capital = pret(),
nbr_mensualite = nombre_mensualite(),
taux = input$interet)
)
cout_total_credit <- reactive(calcul_cout_total_credit(mensualite = mensualite(),
nombre_mensualite = nombre_mensualite()
)
)
CI <-eventReactive(input$simulate,
{calcul_credit_dimpot(cout_construction = input$cout_construction,
cout_non_construction_inclut_CI = input$cout_non_construction_inclut_CI,
taux_credit_impot = input$taux_CI)
})
tresorie <- reactive(calcul_tresorie(annees = input$annees,
revenu_annuel = input$revenu_annuel,
charges_annuelles_init = input$charges_annuelles_init,
taux_taxes_foncieres = input$taux_taxes_foncieres,
charges_courrantes_percentage = input$charges_courrantes_percentage,
mensualite = mensualite(),
duree_annees_pret = input$duree_annee_pret,
credit_impot = CI(),
cout_total_credit = cout_total_credit()))
formated_tresorie <- reactive(tresorie() %>%
datatable() %>%
formatCurrency(c("loyer_annuel", "charges_annuelles", "taxes_foncieres", "charges_courantes",), currency = "€"))
graph_tresorie <- reactive(faire_graph_tresorie(tresorie = tresorie()))
output$cout_total_input <- renderPrint({cout_total_input()})
output$pret <- renderPrint({pret()})
output$nombre_mensualite <- renderPrint({nombre_mensualite()})
output$mensualite <- renderPrint({mensualite()})
output$cout_total_credit <- renderPrint({cout_total_credit()})
output$CI <- renderPrint({CI()})
output$formated_tresorie <- DT::renderDataTable(formated_tresorie())
output$graph_tresorie <- renderPlotly({graph_tresorie()})
}
# Exécuter l'application Shiny
shinyApp(ui, server)
runApp('simulateur_investissement_locatif.R')
library(shiny); runApp('simulateur_investissement_locatif.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Charger les bibliothèques requises
library(shiny)
library(tidyverse)
# library(patchwork)
library(plotly)
library(scales)
library(DT)
library(shinyWidgets)
# Définir la fonction de calcul
calcul_mensualite <- function(capital, taux, nbr_mensualite) {
(capital * taux / 12) / (1 - (((1 + (taux / 12)))^(-nbr_mensualite)))
}
cout_total_construction <- function(cout_construction,
cout_non_construction_inclut_CI,
cout_non_construction_hors_CI,
imprevu) {
cout_construction + cout_non_construction_inclut_CI + cout_non_construction_hors_CI + cout_construction * imprevu
}
calcul_pret <- function(cout_total, apport_perso){
cout_total - apport_perso
}
calcul_nombre_mensualite <- function(duree_annee_pret) {
duree_annee_pret * 12
}
calcul_cout_total_credit <- function(mensualite, nombre_mensualite){
mensualite * nombre_mensualite
}
calcul_credit_dimpot <- function(cout_construction,
cout_non_construction_inclut_CI,
taux_credit_impot) {
(cout_construction + cout_non_construction_inclut_CI) * taux_credit_impot
}
calcul_tresorie <- function(annees,
revenu_annuel,
charges_annuelles_init,
taux_taxes_foncieres,
charges_courrantes_percentage,
inflation,
mensualite,
duree_annees_pret,
credit_impot,
cout_total_credit) {
data.frame(annee = 1:annees) %>%
mutate(loyer_placeholder = revenu_annuel * (1+inflation)^(1:annees),
loyer_annuel = lag(loyer_placeholder),
loyer_annuel = if_else(is.na(loyer_annuel),revenu_annuel,loyer_annuel),
charge_annuelles_placeholder = charges_annuelles_init * (1+inflation)^(1:annees),
charges_annuelles = lag(charge_annuelles_placeholder),
charges_annuelles = if_else(is.na(charges_annuelles),charges_annuelles_init,charges_annuelles)) %>%
select(-loyer_placeholder, -charge_annuelles_placeholder) %>%
mutate(taxes_foncieres = loyer_annuel * taux_taxes_foncieres / 12,
charges_courrantes = loyer_annuel * charges_courrantes_percentage,
remboursement_pret = c(rep(mensualite * 12, duree_annees_pret), rep(0,(annees-duree_annees_pret))),
CI = c(0,credit_impot, rep(0,(annees-2))),
tresorie = cumsum(loyer_annuel - charges_annuelles - taxes_foncieres - charges_courrantes - remboursement_pret + CI),
pret_restant = cout_total_credit -cumsum(remboursement_pret),
pret_restant = if_else(pret_restant <1, 0, pret_restant),
rembourse = cout_total_credit - pret_restant)
}
faire_graph_tresorie <- function(tresorie) {
tresorie %>%
mutate(couleur = if_else(tresorie < 0, "negatif", "positif")) %>%
ggplot() +
geom_col(aes(x=annee, y=tresorie, fill = couleur)) +
theme_minimal() +
scale_fill_manual(values = c("negatif" = "#F4A582", "positif" = "#A6D96A"), guide = FALSE) +
scale_y_continuous(labels=dollar_format(suffix="€",prefix="")) +
theme(legend.position = "none") +
ggtitle("Tresorie par annee") +
ylab("")
}
formatter_currency <- c("loyer_annuel", "charges_annuelles", "taxes_foncieres", "charges_courrantes",
"remboursement_pret", "CI", "tresorie", "pret_restant", "rembourse")
formatteur_euro <- scales::label_dollar(prefix = "", suffix = "€", big.mark = ".", decimal.mark = ",")
# Définir l'interface utilisateur (UI)
ui <- fluidPage(
titlePanel("Analyse financière investissement locatif"),
sidebarLayout(
sidebarPanel(
currencyInput("cout_construction", "Coût de construction", value = 1200000, align =  "right"),
currencyInput("cout_non_construction_inclut_CI", "Coût non construction, inclût crédit d'impôts", value = 150000, align = "right"),
currencyInput("cout_non_construction_hors_CI", "Coût non construction, hors crédit d'impôts", value = 50000, align = "right"),
formatNumericInput("imprevu", "Imprévu (% coût de construction)", value = .10, format = "percentageEU2dec", align = "right"),
currencyInput("apport_perso", "Apport personel",value = 260000, align = "right"),
formatNumericInput("interet", "Taux d'interet", value = 0.05, format = "percentageEU2dec", align = "right"),
autonumericInput("duree_annee_pret", "Nombre d'années prêt", value = 15, align = "right"),
formatNumericInput("taux_CI", "Taux crédit d'impôts", value = .3, format = "percentageEU2dec", align = "right"),
currencyInput("revenu_annuel",
"Revenu annuel", value = 92000, align = "right"),
formatNumericInput("augmentation_loyer",
"Pourcentage d'augmentation loyer annuel", value = .01, format = "percentageEU2dec", align = "right"),
formatNumericInput("charges_courrantes_percentage",
"Charge courrantes (en % du loyer)",
value = .05, format = "percentageEU2dec", align = "right"),
autonumericInput("taux_taxes_foncieres", "Taxes foncières (en nombre de loyer mensuel)",
value = 2), align = "right",
currencyInput("charges_annuelles_init", "Charge annuelle initiale", value = 6000, align = "right"),
autonumericInput("annees", "Simuler sur combien d'années?", value = 20, align = "right"),
actionButton("simulate", "Simulation")
),
mainPanel(
plotlyOutput("graph_tresorie"),
#
#       textOutput("nombre_mensualite"),
#
# textOutput("resumeee"),
#       textOutput("cout_total_credit"),
textOutput("CI"),
DT::DTOutput("resume"),
DT::DTOutput("formated_tresorie")
)
)
)
# Définir le serveur
server <- function(input, output) {
cout_total_input <- eventReactive(input$simulate, {
cout_total_construction(cout_construction = input$cout_construction,
cout_non_construction_inclut_CI = input$cout_non_construction_inclut_CI,
cout_non_construction_hors_CI = input$cout_non_construction_hors_CI,
imprevu = input$imprevu)
})
pret <- reactive(calcul_pret(cout_total = cout_total_input(),
apport_perso = input$apport_perso))
nombre_mensualite <- eventReactive(input$simulate, {
calcul_nombre_mensualite(duree_annee_pret = input$duree_annee_pret)
})
mensualite <- reactive(calcul_mensualite(capital = pret(),
nbr_mensualite = nombre_mensualite(),
taux = input$interet)
)
cout_total_credit <- reactive(calcul_cout_total_credit(mensualite = mensualite(),
nombre_mensualite = nombre_mensualite()
)
)
CI <-eventReactive(input$simulate,
{calcul_credit_dimpot(cout_construction = input$cout_construction,
cout_non_construction_inclut_CI = input$cout_non_construction_inclut_CI,
taux_credit_impot = input$taux_CI)
})
tresorie <- reactive(calcul_tresorie(annees = input$annees,
revenu_annuel = input$revenu_annuel,
charges_annuelles_init = input$charges_annuelles_init,
taux_taxes_foncieres = input$taux_taxes_foncieres,
charges_courrantes_percentage = input$charges_courrantes_percentage,
inflation = input$augmentation_loyer,
mensualite = mensualite(),
duree_annees_pret = input$duree_annee_pret,
credit_impot = CI(),
cout_total_credit = cout_total_credit()))
formated_tresorie <- reactive(tresorie() %>%
datatable() %>%
formatCurrency(formatter_currency, currency = "€"))
graph_tresorie <- reactive(faire_graph_tresorie(tresorie = tresorie()))
resume <- eventReactive(input$simulate,{
rbind.data.frame(
c("Coût de construction:", formatteur_euro(input$cout_construction)),
c("Coût non construction, inclût crédit d'impôts", formatteur_euro(input$cout_non_construction_inclut_CI)),
c("Coût non construction, hors crédit d'impôts", formatteur_euro(input$cout_non_construction_hors_CI)),
c("Imprévu (% coût de construction)", input$imprevu),
c("Coût total construction:",formatteur_euro(cout_total_input())),
c("Apport personel", formatteur_euro(input$apport_perso)),
c("Montant du prêt", formatteur_euro(pret())),
# c("Nombre d'années prêt", input$duree_annee_pret()),
# c("Nombre de mensualités", input$mensualite()),
# c("Taux d'interet", input$interet),
# c("Cout total crédit", formatteur_euro(cout_total_credit())),
# c("Mensualité des remboursements", formatteur_euro(mensualite())),
# c("Taux crédit d'impôts", input$taux_CI),
# c("Montant crédit d'impôts", formatteur_euro(CI())),
# c("Revenu annuel", formatteur_euro(input$revenu_annuel)),
# c("Pourcentage d'augmentation loyer annuel", input$augmentation_loyer),
# c("Charge courrantes (en % du loyer)",input$charges_courrantes_percentage),
# c("Taxes foncières (en nombre de loyer mensuel)",input$taux_taxes_foncieres),
# c("Charge annuelle initiale",input$charges_annuelles_init),
make.row.names = F)  %>%
`names<-`(c("Item", "Valeur"))
})
output$resumeee <- renderPrint(resume())
output$resume <- DT::renderDataTable(resume())
# output$nombre_mensualite <- renderText({
#   paste("Nombre de mensualités:", nombre_mensualite())
#   })
#
# output$mensualite <- renderText({
#   paste("Mensualité à rembourser:", formatteur_euro(mensualite()))
#         })
# output$cout_total_credit <- renderText({
#   paste("Coût total du crédit:", formatteur_euro(cout_total_credit()))
#   })
# output$CI <- renderText({
#   paste("Montant crédit d'impôts:", formatteur_euro(CI()))
#   })
output$formated_tresorie <- DT::renderDataTable(formated_tresorie())
output$graph_tresorie <- renderPlotly({graph_tresorie()})
}
# Exécuter l'application Shiny
shinyApp(ui, server)
runApp()
runApp()
install.packages("openxlsx")
install.package("openxlsx")
install.packages("openxlsx")
install.packages("openxlsx")
install.packages("openxlsx")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shinyuieditor)
shinyuieditor::launch_editor(".")
shinyuieditor::launch_editor()
shinyuieditor::launch_editor(app_loc = "new-app/")
shinyuieditor::launch_editor(app_loc = "new-app/")
shinyuieditor::launch_editor(app_loc = "new-app/")
shiny::runApp('new-app')
??nav_panel
shiny::runApp('new-ap2p')
shiny::runApp('new-app')
shinyuieditor::launch_editor(app_loc = "new-app2/")
remotes::install_github("rstudio/shinyuieditor", force = T)
library(shinyuieditor)
remove.packages("shinyuieditor")
remotes::install_github("rstudio/shinyuieditor")
shiny::runApp()
renv::deactivate()
install.packages("shinythemes")
?grid_page
??grid_page
shiny::runApp()
ui <- grid_page(
theme = shinytheme("simplex"),
layout = c(
"header header   download",
"inputs navpanel navpanel"
),
row_sizes = c(
"100px",
"1fr"
),
col_sizes = c(
"250px",
"1.50fr",
"0.50fr"
),
gap_size = "1rem",
grid_card_text(
area = "header",
content = "Analyse financière investissement locatif",
alignment = "start",
is_title = TRUE
),
grid_card(
area = "navpanel",
card_body(
tabsetPanel(
nav_panel(
title = "Graphique",
plotlyOutput(outputId = "graph_tresorie")
),
nav_panel(
title = "Trésorie",
DTOutput(outputId = "formated_tresorie", width = "100%")
),
nav_panel(
title = "Resumé",
DTOutput(outputId = "resume", width = "100%")
),
nav_panel(
title = "Lisez-moi",
DTOutput(outputId = "lisezmoi", width = "100%")
)
)
)
),
grid_card(
area = "inputs",
card_body(
align = "right",
actionButton(inputId = "simulate", label = "Simulation"),
currencyInput("cout_construction", "Coût de construction", value = 1200000, align =  "right"),
currencyInput("cout_non_construction_inclut_CI", "Coût non construction, inclût crédit d'impôts", value = 150000, align = "right"),
currencyInput("cout_non_construction_hors_CI", "Coût non construction, hors crédit d'impôts", value = 50000, align = "right"),
formatNumericInput("imprevu", "Imprévu (% coût de construction)", value = .10, format = "percentageEU2dec", align = "right"),
currencyInput("apport_perso", "Apport personel",value = 260000, align = "right"),
formatNumericInput("interet", "Taux d'interet", value = 0.05, format = "percentageEU2dec", align = "right"),
autonumericInput("duree_annee_pret", "Nombre d'années prêt", value = 15, align = "right"),
formatNumericInput("taux_CI", "Taux crédit d'impôts", value = .3, format = "percentageEU2dec", align = "right"),
currencyInput("revenu_annuel",
"Revenu annuel", value = 92000, align = "right"),
formatNumericInput("augmentation_loyer",
"Pourcentage d'augmentation loyer annuel", value = .01, format = "percentageEU2dec", align = "right"),
formatNumericInput("charges_courrantes_percentage",
"Charge courrantes (en % du loyer)",
value = .05, format = "percentageEU2dec", align = "right"),
autonumericInput("taux_taxes_foncieres", "Taxes foncières (en nombre de loyer mensuel)",
value = 2),
currencyInput("charges_annuelles_init", "Charge annuelle initiale", value = 6000, align = "right"),
autonumericInput("annees", "Simuler sur combien d'années?", value = 20, align = "right")
)
),
grid_card(
area = "download",
card_body(downloadButton("telecharger", ""))
)
)
runApp()
ui <- grid_page(
theme = shinytheme("yeti"),
layout = c(
"header header   download",
"inputs navpanel navpanel"
),
row_sizes = c(
"100px",
"1fr"
),
col_sizes = c(
"250px",
"1.50fr",
"0.50fr"
),
gap_size = "1rem",
grid_card_text(
area = "header",
content = "Analyse financière investissement locatif",
alignment = "start",
is_title = TRUE
),
grid_card(
area = "navpanel",
card_body(
tabsetPanel(
nav_panel(
title = "Graphique",
plotlyOutput(outputId = "graph_tresorie")
),
nav_panel(
title = "Trésorie",
DTOutput(outputId = "formated_tresorie", width = "100%")
),
nav_panel(
title = "Resumé",
DTOutput(outputId = "resume", width = "100%")
),
nav_panel(
title = "Lisez-moi",
DTOutput(outputId = "lisezmoi", width = "100%")
)
)
)
),
grid_card(
area = "inputs",
card_body(
align = "right",
actionButton(inputId = "simulate", label = "Simulation"),
currencyInput("cout_construction", "Coût de construction", value = 1200000, align =  "right"),
currencyInput("cout_non_construction_inclut_CI", "Coût non construction, inclût crédit d'impôts", value = 150000, align = "right"),
currencyInput("cout_non_construction_hors_CI", "Coût non construction, hors crédit d'impôts", value = 50000, align = "right"),
formatNumericInput("imprevu", "Imprévu (% coût de construction)", value = .10, format = "percentageEU2dec", align = "right"),
currencyInput("apport_perso", "Apport personel",value = 260000, align = "right"),
formatNumericInput("interet", "Taux d'interet", value = 0.05, format = "percentageEU2dec", align = "right"),
autonumericInput("duree_annee_pret", "Nombre d'années prêt", value = 15, align = "right"),
formatNumericInput("taux_CI", "Taux crédit d'impôts", value = .3, format = "percentageEU2dec", align = "right"),
currencyInput("revenu_annuel",
"Revenu annuel", value = 92000, align = "right"),
formatNumericInput("augmentation_loyer",
"Pourcentage d'augmentation loyer annuel", value = .01, format = "percentageEU2dec", align = "right"),
formatNumericInput("charges_courrantes_percentage",
"Charge courrantes (en % du loyer)",
value = .05, format = "percentageEU2dec", align = "right"),
autonumericInput("taux_taxes_foncieres", "Taxes foncières (en nombre de loyer mensuel)",
value = 2),
currencyInput("charges_annuelles_init", "Charge annuelle initiale", value = 6000, align = "right"),
autonumericInput("annees", "Simuler sur combien d'années?", value = 20, align = "right")
)
),
grid_card(
area = "download",
card_body(downloadButton("telecharger", ""))
)
)
runApp()
runApp()
runApp()
shinyuieditor::launch_editor(app_loc = ".")
runApp()
shinyuieditor::launch_editor(app_loc = ".")
runApp()
runApp()
runApp()
runApp()
shinyuieditor::launch_editor(app_loc = ".")
runApp()
runApp()
runApp()
shinyuieditor::launch_editor(app_loc = ".")
?card_body
shinyuieditor::launch_editor(app_loc = ".")
runApp()
shinyuieditor::launch_editor(app_loc = ".")
runApp()
runApp()
runApp()
runApp()
runApp()
?card
runApp()
?nav_panel
runApp()
runApp()
runApp()
renv::activate()
renv::status()
?renv::status
renv::install(shinythemes)
renv::install("shinythemes")
renv::snapshot()
renv::status()
?renv::status
renv::snapshot()
install.packages("gridlayout")
install.packages("testthat")
install.packages("gridlayout")
renv::snapshot()
shiny::runApp()
install.packages("quarto")
utils::installed.packages("gridlayout")
utils::install.packages("gridlayout")
runApp()
??grid_page
devtools::install_github("rstudio/gridlayout")
install.packages("devtools")
devtools::install_github("rstudio/gridlayout")
usethis::github_token()
gh::gh_token()
gh::Sys.getenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
devtools::install_github("rstudio/gridlayout")
usethis::edit_r_environ()
devtools::install_github("rstudio/gridlayout")
